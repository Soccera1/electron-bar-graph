#!/bin/bash

# Electron Bar Graph Configure Script
# Copyright (C) 2025
# SPDX-License-Identifier: AGPL-3.0-or-later

set -e

# Default values
PREFIX="/usr/local"
BINDIR="$PREFIX/bin"
DATADIR="$PREFIX/share/electron-bar-graph"
EMACS_INTEGRATION="yes"
EMACS_BUILD="no"
EMACS_PREFIX="$PREFIX"
NODE_VERSION="18"
BUN_VERSION="latest"
BUILD_TYPE="release"
DEBUG="no"
VERBOSE="no"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Help function
show_help() {
    cat << EOF
Electron Bar Graph Configure Script

Usage: $0 [OPTIONS]

Options:
  --prefix=DIR           Installation prefix (default: /usr/local)
  --bindir=DIR           Binary directory (default: \$prefix/bin)
  --datadir=DIR          Data directory (default: \$prefix/share/electron-bar-graph)
  --enable-emacs         Enable Emacs integration (default: yes)
  --disable-emacs        Disable Emacs integration
  --build-emacs          Build Emacs from source if not found (requires root)
  --emacs-prefix=DIR     Emacs installation prefix (default: \$prefix)
  --node-version=VER     Node.js version to use (default: 18)
  --bun-version=VER      Bun version to use (default: latest)
  --build-type=TYPE      Build type: release, debug (default: release)
  --enable-debug         Enable debug mode
  --verbose              Verbose output
  --help                 Show this help message

Examples:
  $0 --prefix=/opt/electron-bar-graph
  $0 --disable-emacs --build-type=debug
  sudo $0 --build-emacs --emacs-prefix=/usr/local/emacs

EOF
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --prefix=*)
                PREFIX="${1#*=}"
                BINDIR="$PREFIX/bin"
                DATADIR="$PREFIX/share/electron-bar-graph"
                ;;
            --bindir=*)
                BINDIR="${1#*=}"
                ;;
            --datadir=*)
                DATADIR="${1#*=}"
                ;;
            --enable-emacs)
                EMACS_INTEGRATION="yes"
                ;;
            --disable-emacs)
                EMACS_INTEGRATION="no"
                ;;
            --build-emacs)
                EMACS_BUILD="yes"
                ;;
            --emacs-prefix=*)
                EMACS_PREFIX="${1#*=}"
                ;;
            --node-version=*)
                NODE_VERSION="${1#*=}"
                ;;
            --bun-version=*)
                BUN_VERSION="${1#*=}"
                ;;
            --build-type=*)
                BUILD_TYPE="${1#*=}"
                ;;
            --enable-debug)
                DEBUG="yes"
                ;;
            --verbose)
                VERBOSE="yes"
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
        shift
    done
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if running as root
check_root() {
    if [[ "$EMACS_BUILD" == "yes" && "$EUID" -ne 0 ]]; then
        log_error "Building Emacs requires root privileges."
        log_info "Please run the configure script as root:"
        log_info "  sudo ./configure --build-emacs [other options]"
        exit 1
    fi
}

# Check system dependencies
check_dependencies() {
    log_info "Checking system dependencies..."
    
    local missing_deps=()
    
    # Essential build tools
    if ! command_exists make; then
        missing_deps+=("make")
    fi
    
    if ! command_exists gcc && ! command_exists clang; then
        missing_deps+=("gcc or clang")
    fi
    
    if ! command_exists pkg-config; then
        missing_deps+=("pkg-config")
    fi
    
    # Development libraries for Emacs
    if [[ "$EMACS_BUILD" == "yes" ]]; then
        if ! command_exists autoconf; then
            missing_deps+=("autoconf")
        fi
        
        if ! command_exists automake; then
            missing_deps+=("automake")
        fi
        
        if ! pkg-config --exists gtk+-3.0 2>/dev/null; then
            missing_deps+=("libgtk-3-dev")
        fi
        
        if ! pkg-config --exists x11 2>/dev/null; then
            missing_deps+=("libx11-dev")
        fi
        
        if ! pkg-config --exists xpm 2>/dev/null; then
            missing_deps+=("libxpm-dev")
        fi
        
        if ! pkg-config --exists jpeg 2>/dev/null; then
            missing_deps+=("libjpeg-dev")
        fi
        
        if ! pkg-config --exists png 2>/dev/null; then
            missing_deps+=("libpng-dev")
        fi
        
        if ! pkg-config --exists tiff 2>/dev/null; then
            missing_deps+=("libtiff-dev")
        fi
        
        if ! pkg-config --exists giflib 2>/dev/null; then
            missing_deps+=("libgif-dev")
        fi
        
        if ! pkg-config --exists gnutls 2>/dev/null; then
            missing_deps+=("libgnutls28-dev")
        fi
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        log_info "Please install the missing dependencies and run configure again."
        exit 1
    fi
    
    log_success "All system dependencies found"
}

# Check Node.js and Bun
check_nodejs() {
    log_info "Checking Node.js and Bun..."
    
    # Check Node.js
    if command_exists node; then
        local node_ver=$(node --version | sed 's/v//')
        log_info "Found Node.js version: $node_ver"
    else
        log_warning "Node.js not found. Will install Node.js $NODE_VERSION"
        install_nodejs
    fi
    
    # Check Bun
    if command_exists bun; then
        local bun_ver=$(bun --version)
        log_info "Found Bun version: $bun_ver"
    else
        log_warning "Bun not found. Will install Bun $BUN_VERSION"
        install_bun
    fi
}

# Install Node.js
install_nodejs() {
    log_info "Installing Node.js $NODE_VERSION..."
    
    if command_exists curl; then
        curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
        apt-get install -y nodejs
    elif command_exists wget; then
        wget -qO- https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
        apt-get install -y nodejs
    else
        log_error "Neither curl nor wget found. Cannot install Node.js automatically."
        log_info "Please install Node.js manually and run configure again."
        exit 1
    fi
    
    log_success "Node.js installed successfully"
}

# Install Bun
install_bun() {
    log_info "Installing Bun $BUN_VERSION..."
    
    if command_exists curl; then
        curl -fsSL https://bun.sh/install | bash
    elif command_exists wget; then
        wget -qO- https://bun.sh/install | bash
    else
        log_error "Neither curl nor wget found. Cannot install Bun automatically."
        log_info "Please install Bun manually and run configure again."
        exit 1
    fi
    
    # Add Bun to PATH
    export PATH="$HOME/.bun/bin:$PATH"
    
    log_success "Bun installed successfully"
}

# Check Emacs installation
check_emacs() {
    if [[ "$EMACS_INTEGRATION" == "no" ]]; then
        log_info "Emacs integration disabled"
        return 0
    fi
    
    log_info "Checking Emacs installation..."
    
    if command_exists emacs; then
        local emacs_ver=$(emacs --version | head -n1)
        log_success "Found Emacs: $emacs_ver"
        return 0
    fi
    
    if [[ "$EMACS_BUILD" == "yes" ]]; then
        log_warning "Emacs not found. Will build Emacs from source."
        build_emacs
    else
        log_warning "Emacs not found but Emacs integration is enabled."
        log_info "Use --build-emacs to build Emacs from source, --disable-emacs to skip, or install Emacs manually."
        log_info "Continuing without Emacs integration..."
        EMACS_INTEGRATION="no"
    fi
}

# Build Emacs from source
build_emacs() {
    log_info "Building Emacs from source..."
    
    local emacs_dir="$PWD/emacs-build"
    local emacs_install_dir="$EMACS_PREFIX"
    
    # Create build directory
    mkdir -p "$emacs_dir"
    cd "$emacs_dir"
    
    # Download Emacs source
    if [[ ! -d "emacs" ]]; then
        log_info "Downloading Emacs source code..."
        if command_exists git; then
            git clone https://git.savannah.gnu.org/git/emacs.git
        else
            log_error "Git not found. Cannot download Emacs source."
            exit 1
        fi
    fi
    
    cd emacs
    
    # Checkout latest stable release
    git checkout emacs-29.3
    
    # Configure Emacs
    log_info "Configuring Emacs build..."
    ./autogen.sh
    
    # Minimal configuration for basic functionality
    ./configure \
        --prefix="$emacs_install_dir" \
        --with-x-toolkit=gtk3 \
        --with-x \
        --with-gif \
        --with-jpeg \
        --with-png \
        --with-tiff \
        --with-xpm \
        --with-gnutls \
        --without-dbus \
        --without-gconf \
        --without-gsettings \
        --without-selinux \
        --without-xaw3d \
        --without-xim \
        --without-xwidgets \
        --without-makeinfo \
        --without-pop \
        --without-kerberos \
        --without-kerberos5 \
        --without-hesiod \
        --without-srv \
        --without-gssapi \
        --without-ldap \
        --without-xml2 \
        --without-gpm \
        --without-dragndrop \
        --without-sound \
        --without-xft \
        --without-libotf \
        --without-m17n-flt \
        --without-toolkit-scroll-bars \
        --without-xaw3d \
        --without-xim \
        --without-xwidgets \
        --without-makeinfo \
        --without-pop \
        --without-kerberos \
        --without-kerberos5 \
        --without-hesiod \
        --without-srv \
        --without-gssapi \
        --without-ldap \
        --without-xml2 \
        --without-gpm \
        --without-dragndrop \
        --without-sound \
        --without-xft \
        --without-libotf \
        --without-m17n-flt \
        --without-toolkit-scroll-bars
    
    # Build Emacs
    log_info "Building Emacs (this may take a while)..."
    make -j$(nproc)
    
    # Install Emacs
    log_info "Installing Emacs..."
    make install
    
    # Create symlink if needed
    if [[ ! -f "/usr/local/bin/emacs" ]]; then
        ln -sf "$emacs_install_dir/bin/emacs" /usr/local/bin/emacs
    fi
    
    log_success "Emacs built and installed successfully"
    
    # Return to original directory
    cd "$OLDPWD"
}

# Generate config.h
generate_config_h() {
    log_info "Generating config.h..."
    
    cat > config.h << EOF
/* Generated by configure script */
#ifndef CONFIG_H
#define CONFIG_H

/* Installation paths */
#define PREFIX "$PREFIX"
#define BINDIR "$BINDIR"
#define DATADIR "$DATADIR"
#define EMACS_PREFIX "$EMACS_PREFIX"

/* Feature flags */
#define EMACS_INTEGRATION $([ "$EMACS_INTEGRATION" = "yes" ] && echo "1" || echo "0")
#define EMACS_BUILD $([ "$EMACS_BUILD" = "yes" ] && echo "1" || echo "0")
#define DEBUG $([ "$DEBUG" = "yes" ] && echo "1" || echo "0")
#define VERBOSE $([ "$VERBOSE" = "yes" ] && echo "1" || echo "0")

/* Build configuration */
#define BUILD_TYPE "$BUILD_TYPE"
#define NODE_VERSION "$NODE_VERSION"
#define BUN_VERSION "$BUN_VERSION"

#endif /* CONFIG_H */
EOF
    
    log_success "config.h generated"
}

# Generate Makefile
generate_makefile() {
    log_info "Generating Makefile..."
    
    cat > Makefile << EOF
# Generated by configure script
# Electron Bar Graph Makefile

# Configuration
PREFIX = $PREFIX
BINDIR = $BINDIR
DATADIR = $DATADIR
EMACS_PREFIX = $EMACS_PREFIX
EMACS_INTEGRATION = $EMACS_INTEGRATION
EMACS_BUILD = $EMACS_BUILD
DEBUG = $DEBUG
VERBOSE = $VERBOSE
BUILD_TYPE = $BUILD_TYPE
NODE_VERSION = $NODE_VERSION
BUN_VERSION = $BUN_VERSION

# Directories
SRCDIR = electron-bar-graph
BUILDDIR = build
DISTDIR = dist

# Files
MAIN_JS = \$(SRCDIR)/main.js
RENDERER_JS = \$(SRCDIR)/renderer.js
INDEX_HTML = \$(SRCDIR)/index.html
STYLE_CSS = \$(SRCDIR)/style.css
BAR_GRAPH_EL = \$(SRCDIR)/bar-graph.el
PACKAGE_JSON = \$(SRCDIR)/package.json
CONFIG_H = config.h

# Default target
all: build

# Build targets
build: \$(CONFIG_H)
	@echo "Building Electron Bar Graph..."
	@mkdir -p \$(BUILDDIR)
	@rsync -a --exclude=node_modules \$(SRCDIR)/ \$(BUILDDIR)/ 2>/dev/null || cp -r \$(SRCDIR)/* \$(BUILDDIR)/ 2>/dev/null || true
	@cp \$(CONFIG_H) \$(BUILDDIR)/
	@cd \$(BUILDDIR) && bun install
	@echo "Build complete!"

# Install targets
install: build
	@echo "Installing Electron Bar Graph..."
	@mkdir -p \$(BINDIR)
	@mkdir -p \$(DATADIR)
	@cp -r \$(BUILDDIR)/* \$(DATADIR)/
	@echo "#!/bin/bash" > \$(BINDIR)/electron-bar-graph
	@echo "cd \$(DATADIR) && electron . \"\$$@\"" >> \$(BINDIR)/electron-bar-graph
	@chmod +x \$(BINDIR)/electron-bar-graph
	@echo "Installation complete!"
	@echo "Note: You may need to run 'make install' as root for system-wide installation"

# Clean targets
clean:
	@echo "Cleaning build files..."
	@rm -rf \$(BUILDDIR)
	@rm -rf \$(DISTDIR)
	@rm -f \$(CONFIG_H)
	@echo "Clean complete!"

# Distclean target
distclean: clean
	@echo "Cleaning all generated files..."
	@rm -f Makefile
	@rm -rf emacs-build
	@echo "Distclean complete!"

# Test targets
test: test-build test-unit

test-unit: build
	@echo "🧪 Running JavaScript unit tests..."
	@cd \$(BUILDDIR) && bun test

test-build:
	@echo "🔧 Running build system tests..."
	@if [ -f "test-configure.sh" ]; then \\
		chmod +x test-configure.sh && ./test-configure.sh; \\
	else \\
		echo "⚠️  test-configure.sh not found, skipping build system tests"; \\
	fi

test-coverage: build
	@echo "📊 Running tests with coverage..."
	@cd \$(BUILDDIR) && bun test --coverage

test-watch: build
	@echo "👀 Running tests in watch mode..."
	@cd \$(BUILDDIR) && bun test --watch

# Development targets
dev: build
	@echo "Starting development server..."
	@cd \$(BUILDDIR) && bun run dev

# Package targets
package: build
	@echo "Creating package..."
	@mkdir -p \$(DISTDIR)
	@tar -czf \$(DISTDIR)/electron-bar-graph-\$(BUILD_TYPE).tar.gz -C \$(BUILDDIR) .
	@echo "Package created: \$(DISTDIR)/electron-bar-graph-\$(BUILD_TYPE).tar.gz"

# Help target
help:
	@echo "Available targets:"
	@echo "  build        - Build the application"
	@echo "  install      - Install the application"
	@echo "  clean        - Clean build files"
	@echo "  distclean    - Clean all generated files"
	@echo "  test         - Run all tests (build + unit tests)"
	@echo "  test-unit    - Run JavaScript unit tests only"
	@echo "  test-build   - Run build system tests only"
	@echo "  test-coverage- Run tests with coverage report"
	@echo "  test-watch   - Run tests in watch mode"
	@echo "  dev          - Start development server"
	@echo "  package      - Create distribution package"
	@echo "  help         - Show this help"

.PHONY: all build install clean distclean test test-unit test-build test-coverage test-watch dev package help
EOF
    
    log_success "Makefile generated"
}

# Main function
main() {
    log_info "Electron Bar Graph Configure Script"
    log_info "===================================="
    
    # Parse command line arguments
    parse_args "$@"
    
    # Check if root is required for Emacs build
    check_root
    
    # Check dependencies
    check_dependencies
    
    # Check Node.js and Bun
    check_nodejs
    
    # Check Emacs if needed
    check_emacs
    
    # Generate configuration files
    generate_config_h
    generate_makefile
    
    log_success "Configuration complete!"
    log_info "Run 'make' to build the application"
    log_info "Run 'make install' to install the application"
    log_info "Run 'make help' for more options"
}

# Run main function
main "$@"
